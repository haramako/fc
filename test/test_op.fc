use unittest;

include( "character.chr" );

function test_const_op():void
{
	assert_equal( 1, 1, 'num');
	assert_equal( (18%((2*((10+10)-5))/3)), 8, '+,-,*,/,%');
	assert_true(  (1 < 2), "<");
	assert_true( !(2 < 2), "!,<");
	assert_true(  (2 > 1), ">");
	assert_true( !(2 > 2), "!,>");
	assert_true(  (2 <= 2), "<=");
	assert_true( !(3 <= 2), "!,<=");
	assert_true(  (3 >= 2), ">=");
	assert_true( !(2 >= 3), "!,>=");
	assert_true( 2 == 2, "==");
	assert_true( 2 != 3, "!=");
}

function test_int_op():void
{
	var i1 = 1;
	var i2 = 2;
	var i3 = 3;
	var i5 = 5;
	var i10 = 10;

	assert_equal( i1, i1, 'num');
	assert_equal( i2*i3, 6, '2*3');
	assert_equal( i5*i5, 25, '+,-,*,/,%');
	assert_equal( i5*60, 44, '+,-,*,/,%');
	assert_equal( i10/i3, 3, '/');
	assert_equal( 255/i10, 25, '/');
	assert_equal( 255%i10, 5, '%');
	assert_equal( (18%((i2*((i10+i10)-i5))/i3)), 8, '+,-,*,/,%');

	assert_equal( i3 & i2, 2, '&' );
	assert_equal( i1 | i2, 3, '|' );
	assert_equal( i3 ^ i2, 1, '^' );

	assert_true(  (i1 < i2), "<");
	assert_true( !(i2 < i2), "!,<");
	assert_true(  (i2 > i1), ">");
	assert_true( !(i2 > i2), "!,>");
	assert_true(  (i2 <= i2), "<=");
	assert_true( !(i3 <= i2), "!,<=");
	assert_true(  (i3 >= i2), ">=");
	assert_true( !(i2 >= i3), "!,>=");
	assert_true( i2 == i2, "==");
	assert_true( i2 != i3, "!=");

	// 定数の最適化
	assert_equal( i10*16, 160, '*const' );
	assert_equal( i10/4, 2, '/const' );
	assert_equal( i10%8, 2, '%const' );
}


function test_int8_op():void
{
	var i1:sint8 = -1;
	var i2:sint8 = -2;
	var i3:sint8 = 3;
	var m3:sint8 = -3;
	var i5:sint8  = -5;
	var i10:sint8 = 10;
	var m10:sint8 = -10;
	var m127:sint8 = -127;

	assert_equal( m10/4, -3, '-10/4' );
	assert_equal( m10*2, -20, '-10*2' );
	
	assert_equal( i1, i1, 'num');
	assert_equal( i10/i3, 3, '10/3');
	assert_equal( m10/i3, -4, '10/-3');
	assert_equal( i10/m3, -4, '-10/-3');
	assert_equal( m10/m3, 3, '-10/-3');
	assert_equal( i10/i2, -5, '+,-,*,/,%');
	/*
	assert_equal( i5*i5, 25, '+,-,*,/,%');
	assert_equal( i5*60, 44, '+,-,*,/,%');
	assert_equal( i10/i3, 3, '/');
	assert_equal( 255/i10, 25, '/');
	assert_equal( 255%i10, 5, '%');
	assert_equal( (18%((i2*((i10+i10)-i5))/i3)), 8, '+,-,*,/,%');
	*/

	assert_equal( i3 & i2, 2, '&' );
	assert_equal( i1 | i2, -1, '|' );
	assert_equal( i3 ^ i2, -3, '^' );
  
	assert_true(  (i2 < i1), "<");
	assert_true( !(i2 < i2), "!,<");
	assert_true(  (i1 > i2), ">");
	assert_true( !(i2 > i2), "!,>");
	assert_true(  (i2 <= i2), "<=");
	assert_true( !(i3 <= i2), "!,<=");
	assert_true(  (i3 >= i2), ">=");
	assert_true( !(i2 >= i3), "!,>=");
	assert_true( i2 == i2, "==");
	assert_true( i2 != i3, "!=");

	// 定数の最適化
	assert_equal( m10*16, 96, '*const' );
	assert_equal( m10/4, -3, '/const' );
	assert_equal( m10%8, 6, '%const' );
}

function test_int16_op():void
{
	var i1:int16 = 1;
	var i2:int16 = 2;
	var i3:int16 = 3;
	var i5:int16 = 5;
	var i10:int16 = 10;
	var i1000:int16 = 1000;
	var i10000:int16 = 10000;

	assert_equal( i1, i1, 'num');
	//assert_equal( i2*((i10+i10)-i5), 30, '+,-,*,/,%');
	//assert_equal( (18%((2*((i10+10)-5))/3)), 8, '+,-,*,/,%');
	assert_equal( i10000/10, 1000, '/' );

	assert_equal( i3 & i2, 2, '&' );
	assert_equal( i1 | i2, 3, '|' );
	assert_equal( i3 ^ i2, 1, '^' );
  
	assert_true(  (i1 < i2), "<");
	assert_true( !(i2 < i2), "!,<");
	assert_true(  (i2 > i1), ">");
	assert_true( !(i2 > i2), "!,>");
	assert_true(  (i2 <= i2), "<=");
	assert_true( !(i3 <= i2), "!,<=");
	assert_true(  (i3 >= i2), ">=");
	assert_true( !(i2 >= i3), "!,>=");
	assert_true( i2 == i2, "==");
	assert_true( i2 != i3, "!=");

	// 定数の最適化
	assert_equal( i10*16, 160, '*const' );
	assert_equal( i10/4, 2, '/const' );
	assert_equal( i10%8, 2, '%const' );
}

function test_int8x16_op():void
{
	var i1:int = 1;
	var i2:int = 2;
	var i3:int = 3;
	var i10:int16 = 10;
	var w1:int16 = 1;
	var w2:int16 = 2;
	var w3:int16 = 3;
	var w10:int16 = 10;

	assert_equal( w1, i1, 'num');
	assert_equal( (18%((2*((10+10)-5))/3)), 8, '+,-,*,/,%');
	assert_true(  (w1 < i2), "<");
	assert_true( !(w2 < i2), "!,<");
	assert_true(  (w2 > i1), ">");
	assert_true( !(w2 > i2), "!,>");
	assert_true(  (w2 <= i2), "<=");
	assert_true( !(w3 <= i2), "!,<=");
	assert_true(  (w3 >= i2), ">=");
	assert_true( !(w2 >= i3), "!,>=");
	assert_true( w2 == i2, "==");
	assert_true( w2 != i3, "!=");
}

function test_logical_op():void
{
	var T = 1;
	var F = 0;
	assert_true(    T && T , "T&&T");
	assert_true(  !(T && F), "T&&F");
	assert_true(  !(F && T), "F&&T");
	assert_true(  !(F && F), "F&&F");
	assert_true(    T || F , "T||F");
	assert_true(    T || F , "T||F");
	assert_true(    F || T , "F||T");
	assert_true(  !(F || F), "F||F");
}

var x:int;
var w:int16;

function test_pointer_op():void
{
	var px = &x;
	x = 99;
	assert_equal( *px, 99, "&x" );
	*px = 98;
	assert_equal( x, 98, "*px" );

	var pw = &w;
	w = 9999;
	assert_equal( *pw, 9999, "&w" );
	*pw = 9998;
	assert_equal( w, 9998, "*pw" );
}

function main():void
{
	unittest_run_tests();
}
