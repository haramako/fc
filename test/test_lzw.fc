use lzw;
use mem;
use * from unittest;
use * from stdio;

function test_read_bit():void
{
	lzw.addr = [0b00000101, 0b00111001, 0b01110111];
	lzw.bpos = 0;
	var x:int;
	for(x,0,8){ assert_equal( lzw.read_bit(3), x, "read_bit" ); }
}

function test_read_bit2():void
{
	lzw.addr = [0b00001111, 0b11111111, 0b11110000];
	lzw.bpos = 0;
	assert_equal( lzw.read_bit(4), 0, "read_bit2(0)" );
	assert_equal( lzw.read_bit(16), -1, "read_bit2(1)" );
	assert_equal( lzw.read_bit(4), 0, "read_bit2(2)" );
}

function test_read_vln():void
{
	lzw.addr = [0b01001110, 0b00000100];
	lzw.bpos = 0;
	assert_equal( lzw.read_vln(), 0b00001001, "read_vln(0)" );
	assert_equal( lzw.read_vln(), 0b10000001, "read_vln(1)" );
}

function test_read_vln16():void
{
	lzw.addr = [0b01000000, 0b11100000,0b00000000, 0b01000000];
	lzw.bpos = 0;
	assert_equal( lzw.read_vln16(), 0b10000001, "read_vln16(0)" );
	assert_equal( lzw.read_vln16(), 0b1000000000000001, "read_vln16(1)" );
}

var buf:int[256];
function test_unpack():void
{
	const PACKED = [12, 82, 44, 182, 203, 101, 190, 64, 51, 40, 200, 145, 37, 192];
	const UNPACKED = "Hello Hello Hello Fello.";
	var len = lzw.unpack(buf, PACKED);
	assert_equal( len, mem.strlen(UNPACKED), "len");
	assert_equal( mem.compare(buf, UNPACKED, len), 0, "compare");
}

function main():void
{
	unittest_run_tests();
}
