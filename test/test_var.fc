use stdio;
use unittest;

include( "character.chr" );

var array:int[10];
const CONST:int[] = [0,1,2,3,4,5,6,7,8,9];
const add2 = ->int(a:int){ return a+2; };

function test_const():void
{
	print('test_const:');
	
	const INT:int = 1;
	const UINT = -2;
	const INT16:int = 65535;
	const UINT16 = -65536;
	const ARRAY = [1,2,3];
	const STRING = "hoge";
	assert_equal( INT, 1, 'const');
	assert_equal( UINT, -2, 'const2');
	assert_equal( INT16, 65535, 'const');
	assert_equal( UINT16, -65536, 'const2');
	assert_equal( ARRAY[2], 3, 'const[]' );
	assert_equal( STRING[4], 0, 'string[]' );
	
	puts('');
}

function test_pointer():void
{
	print('test_pointer:');
	
	assert_equal( CONST[1], 1, 'const[]' );
	array[1] = 1;
	assert_equal( array[1], 1, 'array[]' );

	var i = 2;
	assert_equal( CONST[i], 2, 'const[i]' );
	array[i] = 2;
	assert_equal( array[i], 2, 'array[i]' );
	
	puts('');
}

function test_array():void
{
	print('test_for:');
	var i = 0;
	array[i] = i+1;
	i += 1;
	array[i] = i+1;
	i += 1;
	array[i] = i+1;
	assert_equal( array[0], 1, 'a[0]' );
	assert_equal( array[1], 2, 'a[1]' );
	assert_equal( array[2], 3, 'a[2]' );
	puts('');
}

function add1( a:int ):int
{
	return a+1;
}

function mul2( a:int ):int
{
	return a*2;
}

const FUNC_TABLE:int(int)[] = [add1,mul2];

function test_func_pointer(): void
{
	print('test_func_pointer:');

	var f:int(int) = add1;
	assert_equal( f(10), 11, 'f()' );
	assert_equal( FUNC_TABLE[0](10), 11, 'FUNC_TABLE[0]()');
	assert_equal( FUNC_TABLE[1](10), 20, 'FUNC_TABLE[1]()');

	assert_equal( add2(1), 3, 'lambda' );
	assert_equal( ->int(a:int){ return a+2; }(1), 3, 'lambda literal' );
	
	puts('');
}

function test_escape(): void
{
	print('test_escape:');
	const STR = "\n\xff";
	assert_equal( STR[0], 10, "escape n" );
	assert_equal( <uint>STR[1], 0xff, "escape x" );
	puts('');
}

function main():void
{
	init();

	test_const();
	test_pointer();
	test_array();
	test_func_pointer();
	test_escape();

	exit(0);
}
