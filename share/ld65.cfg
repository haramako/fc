# memory config for ld65

MEMORY {
  ZP: start = $00, size = $80, type = rw, define = yes;
  ZP_STACK: start = $80, size = $80, type = rw, define = yes;
  SRAM: start = $0200, size = $0500, type = rw, define = yes;
  HEADER: start = $0000, size = $10, file = %O, fill = yes;
  <%- banks.each.with_index do |bank,i| -%>
  ROM<%=i%>: start = $<%=bank[:org].to_s(16)%>, size = $<%=bank[:size].to_s(16)%>, file = %O, fill = yes, define = yes;
  <%- end -%>
  ROMV: start = $fffa, size = $0006, file = %O, fill = yes;
  ROMC: start = $0000, size = $<%=(ineschr*0x2000).to_s(16)%>, file = %O, fill = yes;
}

SEGMENTS {
  HEADER: load = HEADER, type = ro;
  CODE: load = ROM<%=banks.size-1%>, type = ro, define = yes;
  FC_RUNTIME: load = ROM<%=banks.size-1%>, type = ro, define = yes;
  VECTORS: load = ROMV, type = rw;
  CHARS: load = ROMC, type = rw, optional = yes;
  BSS: load = SRAM, type= bss, define = yes;
  ZEROPAGE: load = ZP, type = zp;
  FC_ZEROPAGE: load = ZP, type = zp;
  FC_STACK: load = ZP_STACK, type = zp;
  <%- segs.each do |seg| -%>
  <%= seg[:name] %>: load = ROM<%=seg[:bank]%>, type = ro;
  <%- end -%>
}
