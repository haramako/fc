#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'
module Fc
  class Parser < Racc::Parser
##### State transition tables begin ###

racc_action_table = [
    -3,   142,   155,    21,    27,    76,    25,   152,   145,   167,
    24,   140,   138,    22,   139,   153,   156,   140,   138,    26,
   139,   146,   154,   141,   153,    36,   197,    37,   142,    84,
     7,   198,     8,     9,    10,    31,   233,    11,    12,    13,
    14,    38,   145,   208,   209,    17,    18,    32,    19,    20,
    77,   140,   138,   163,   139,   146,    91,    23,   142,    28,
    29,    30,    33,    -2,   224,   213,    21,    27,   172,    25,
    33,    84,   203,    24,   140,   138,    22,   139,   140,   138,
   176,   139,    26,   208,   209,   136,    49,    71,    72,    81,
    53,    54,    55,     7,   178,     8,     9,    10,    31,   179,
    11,    12,    13,    14,   180,    -2,    97,    84,    17,    18,
    32,    19,    20,    49,    71,    72,    80,    53,    54,    55,
    23,    97,    28,    29,    30,    33,    49,    71,    72,   146,
    53,    54,    55,    51,    52,    69,    70,    65,    66,    67,
    68,    63,    64,    56,    58,    57,    59,    60,    50,    61,
    62,   146,    79,    21,    27,   189,    25,    49,    71,    72,
    24,    21,    27,    22,    25,    49,    71,    72,    24,    26,
   146,    22,   140,   138,   192,   139,   193,    26,   194,   166,
     7,    93,     8,     9,    10,    31,    33,    11,    12,    13,
    14,   161,   -36,    31,   196,    17,    18,    32,    19,    20,
    49,    71,    72,   146,   157,    32,   199,    23,   151,    28,
    29,    30,    33,    21,    27,    23,    25,    28,    29,    30,
    24,    21,    27,    22,    25,    49,    71,    72,    24,    26,
    73,    22,    49,    71,    72,   151,   143,    26,   206,   153,
     7,   134,     8,     9,    10,    31,    77,    11,    12,    13,
    14,   132,   -39,    31,    33,    17,    18,    32,    19,    20,
    49,    71,    72,   -39,   -39,    32,    84,    23,   172,    28,
    29,    30,    33,    21,    27,    23,    25,    28,    29,    30,
    24,    21,    27,    22,    25,    49,    71,    72,    24,    26,
   131,    22,    33,    47,   219,   146,   221,    26,    44,   130,
     7,    43,     8,     9,    10,    31,   227,    11,    12,    13,
    14,    94,    97,    31,    84,    17,    18,    32,    19,    20,
    42,    97,   231,   232,    99,    32,    41,    23,   101,    28,
    29,    30,    33,    21,    27,    23,    25,    28,    29,    30,
    24,    21,    27,    22,    25,   146,    40,    39,    24,    26,
   103,    22,   146,   104,    34,   213,   nil,    26,   nil,   nil,
     7,   nil,     8,     9,    10,    31,   nil,    11,    12,    13,
    14,   nil,    -3,    31,   nil,    17,    18,    32,    19,    20,
   nil,   nil,   nil,   nil,   nil,    32,   nil,    23,   nil,    28,
    29,    30,    33,    21,    27,    23,    25,    28,    29,    30,
    24,    21,    27,    22,    25,   nil,   nil,   nil,    24,    26,
   nil,    22,   nil,   nil,   nil,   nil,   nil,    26,   nil,   nil,
     7,   nil,     8,     9,    10,    31,   nil,    11,    12,    13,
    14,   nil,   nil,    31,   nil,    17,    18,    32,    19,    20,
   nil,   nil,   nil,   nil,   nil,    32,   nil,    23,   nil,    28,
    29,    30,    33,    21,    27,    23,    25,    28,    29,    30,
    24,    21,    27,    22,    25,   nil,   nil,   nil,    24,    26,
   nil,    22,    21,    27,   nil,    25,   nil,    26,   nil,    24,
    21,    27,    22,    25,   nil,    31,   nil,    24,    26,   nil,
    22,   nil,   nil,    31,   nil,   nil,    26,    32,   nil,   nil,
   nil,   nil,   nil,   nil,    31,    32,   nil,    23,   nil,    28,
    29,    30,    31,   nil,   nil,    23,    32,    28,    29,    30,
   nil,   nil,   nil,   nil,    32,   nil,    23,   nil,    28,    29,
    30,   nil,    21,    27,    23,    25,    28,    29,    30,    24,
    21,    27,    22,    25,   nil,   nil,   nil,    24,    26,   nil,
    22,    21,    27,   nil,    25,   nil,    26,   nil,    24,    21,
    27,    22,    25,   nil,    31,   nil,    24,    26,   nil,    22,
   nil,   nil,    31,   nil,   nil,    26,    32,   nil,   nil,   nil,
   nil,   nil,   nil,    31,    32,   nil,    23,   nil,    28,    29,
    30,    31,   nil,   nil,    23,    32,    28,    29,    30,   nil,
   nil,   nil,   nil,    32,   nil,    23,   nil,    28,    29,    30,
   nil,    21,    27,    23,    25,    28,    29,    30,    24,    21,
    27,    22,    25,   nil,   nil,   nil,    24,    26,   nil,    22,
    21,    27,   nil,    25,   nil,    26,   nil,    24,    21,    27,
    22,    25,   nil,    31,   nil,    24,    26,   nil,    22,   nil,
   nil,    31,   nil,   nil,    26,    32,   nil,   nil,   nil,   nil,
   nil,   nil,    31,    32,   nil,    23,   nil,    28,    29,    30,
    31,   nil,   nil,    23,    32,    28,    29,    30,   nil,   nil,
   nil,   nil,    32,   nil,    23,   nil,    28,    29,    30,   nil,
   nil,   nil,    23,   170,    28,    29,    30,    21,    27,   nil,
    25,   nil,    21,    27,    24,    25,   nil,    22,   nil,    24,
   nil,   nil,    22,    26,   nil,   nil,   nil,   nil,    26,   nil,
    21,    27,   nil,    25,   nil,   nil,   nil,    24,   nil,    31,
    22,   nil,   nil,   nil,    31,   nil,    26,   nil,   nil,   nil,
   nil,    32,   nil,   nil,   nil,   nil,    32,   nil,   nil,   nil,
   nil,    23,    31,    28,    29,    30,    23,   nil,    28,    29,
    30,   nil,   nil,   nil,    32,    21,    27,   nil,    25,   nil,
   nil,   nil,    24,   nil,    23,    22,    28,    29,    30,   nil,
   nil,    26,    21,    27,   nil,    25,   nil,   nil,   nil,    24,
   nil,   nil,    22,   nil,   nil,   nil,   nil,    31,    26,   nil,
    21,    27,   nil,    25,   nil,   nil,   nil,    24,   nil,    32,
    22,   nil,   nil,   nil,    31,   nil,    26,    21,    27,    23,
    25,    28,    29,    30,    24,   nil,    32,    22,   nil,   nil,
   nil,   nil,    31,    26,   nil,   nil,    23,   nil,    28,    29,
    30,   nil,   nil,   nil,    32,   nil,   nil,   nil,   nil,    31,
   nil,   nil,    21,    27,    23,    25,    28,    29,    30,    24,
   nil,    32,    22,   nil,   nil,   nil,   nil,   nil,    26,    21,
    27,    23,    25,    28,    29,    30,    24,   nil,   nil,    22,
   nil,   nil,   nil,   nil,    31,    26,   nil,    21,    27,   nil,
    25,   nil,   nil,   nil,    24,   nil,    32,    22,   nil,   nil,
   nil,    31,   nil,    26,    21,    27,    23,    25,    28,    29,
    30,    24,   nil,    32,    22,   nil,   nil,   nil,   nil,    31,
    26,   nil,   nil,    23,   nil,    28,    29,    30,   nil,   nil,
   nil,    32,   nil,   nil,   nil,   nil,    31,   nil,   nil,    21,
    27,    23,    25,    28,    29,    30,    24,   nil,    32,    22,
   nil,   nil,   nil,   nil,   nil,    26,    21,    27,    23,    25,
    28,    29,    30,    24,   nil,   nil,    22,   nil,   nil,   nil,
   nil,    31,    26,   nil,    21,    27,   nil,    25,   nil,   nil,
   nil,    24,   nil,    32,    22,   nil,   nil,   nil,    31,   nil,
    26,    21,    27,    23,    25,    28,    29,    30,    24,   nil,
    32,    22,   nil,   nil,   nil,   nil,    31,    26,   nil,   nil,
    23,   nil,    28,    29,    30,   nil,   nil,   nil,    32,   nil,
   nil,   nil,   nil,    31,   nil,   nil,    21,    27,    23,    25,
    28,    29,    30,    24,   nil,    32,    22,   nil,   nil,   nil,
   nil,   nil,    26,    21,    27,    23,    25,    28,    29,    30,
    24,   nil,   nil,    22,   nil,   nil,   nil,   nil,    31,    26,
   nil,    21,    27,   nil,    25,   nil,   nil,   nil,    24,   nil,
    32,    22,   nil,   nil,   nil,    31,   nil,    26,    21,    27,
    23,    25,    28,    29,    30,    24,   nil,    32,    22,   nil,
   nil,   nil,   nil,    31,    26,   nil,   nil,    23,   nil,    28,
    29,    30,   nil,   nil,   nil,    32,   nil,   nil,   nil,   nil,
    31,   nil,   nil,    21,    27,    23,    25,    28,    29,    30,
    24,   nil,    32,    22,   nil,   nil,   nil,   nil,   nil,    26,
    21,    27,    23,    25,    28,    29,    30,    24,   nil,   nil,
    22,   nil,   nil,   nil,   nil,    31,    26,   nil,    21,    27,
   nil,    25,   nil,   nil,   nil,    24,   nil,    32,    22,   nil,
   nil,   nil,    31,   nil,    26,    21,    27,    23,    25,    28,
    29,    30,    24,   nil,    32,    22,   nil,   nil,   nil,   nil,
    31,    26,   nil,   nil,    23,   nil,    28,    29,    30,   nil,
   nil,   nil,    32,   nil,   nil,   nil,   nil,    31,   nil,   nil,
    21,    27,    23,    25,    28,    29,    30,    24,   nil,    32,
    22,   nil,   nil,   nil,   nil,   nil,    26,    21,    27,    23,
    25,    28,    29,    30,    24,   nil,   nil,    22,   nil,   nil,
   nil,   nil,    31,    26,   nil,    21,    27,   nil,    25,   nil,
   nil,   nil,    24,   nil,    32,    22,   nil,   nil,   nil,    31,
   nil,    26,    21,    27,    23,    25,    28,    29,    30,    24,
   nil,    32,    22,   nil,   nil,   nil,   nil,    31,    26,   nil,
   nil,    23,   nil,    28,    29,    30,   nil,   nil,   nil,    32,
   nil,   nil,   nil,   nil,    31,   nil,   nil,   nil,   nil,    23,
   nil,    28,    29,    30,   nil,   nil,    32,    49,    71,    72,
   nil,    53,    54,    55,    51,    52,    23,   nil,    28,    29,
    30,    49,    71,    72,   nil,    53,    54,    55,    51,    52,
    69,    70,    65,    66,    67,    68,    63,    64,    56,    58,
    57,    59,    60,    50,    61,    62,    49,    71,    72,   nil,
    53,    54,    55,    51,    52,    69,    70,    65,    66,    67,
    68,    63,    64,    56,    58,    57,    59,    60,    50,    61,
    62,   nil,   nil,   nil,    49,    71,    72,   164,    53,    54,
    55,    51,    52,    69,    70,    65,    66,    67,    68,    63,
    64,    56,    58,    57,    59,    60,    50,    61,    62,   nil,
   nil,   nil,   195,   nil,   nil,    49,    71,    72,   210,    53,
    54,    55,    51,    52,    69,    70,    65,    66,    67,    68,
    63,    64,    56,    58,    57,    59,    60,    50,    61,    62,
   nil,    49,    71,    72,   235,    53,    54,    55,    51,    52,
    69,    70,    65,    66,    67,    68,    63,    64,    56,    58,
    57,    59,    60,    50,    61,    62,   nil,    49,    71,    72,
   160,    53,    54,    55,    51,    52,    69,    70,    65,    66,
    67,    68,    63,    64,    56,    58,    57,    59,    60,    50,
    61,    62,   nil,    49,    71,    72,   230,    53,    54,    55,
    51,    52,    69,    70,    65,    66,    67,    68,    63,    64,
    56,    58,    57,    59,    60,    50,    61,    62,   nil,    49,
    71,    72,   162,    53,    54,    55,    51,    52,    69,    70,
    65,    66,    67,    68,    63,    64,    56,    58,    57,    59,
    60,    50,    61,    62,   nil,    49,    71,    72,   135,    53,
    54,    55,    51,    52,    69,    70,    65,    66,    67,    68,
    63,    64,    56,    58,    57,    59,    60,    50,    61,    62,
   nil,    49,    71,    72,   158,    53,    54,    55,    51,    52,
    69,    70,    65,    66,    67,    68,    63,    64,    56,    58,
    57,    59,    60,    50,    61,    62,   nil,    48,    49,    71,
    72,   nil,    53,    54,    55,    51,    52,    69,    70,    65,
    66,    67,    68,    63,    64,    56,    58,    57,    59,    60,
    50,    61,    62,    49,    71,    72,   nil,    53,    54,    55,
    51,    52,    69,    70,    65,    66,    67,    68,    63,    64,
    56,    58,    57,    59,    60,    50,    61,    62,    49,    71,
    72,   nil,    53,    54,    55,    51,    52,    69,    70,    65,
    66,    67,    68,    63,    64,    56,    58,    57,    59,    60,
    50,    61,    62,    49,    71,    72,   nil,    53,    54,    55,
    51,    52,    69,    70,    65,    66,    67,    68,    63,    64,
    56,    58,    57,    59,    60,    50,    61,    62,    49,    71,
    72,   nil,    53,    54,    55,    51,    52,    69,    70,    65,
    66,    67,    68,    63,    64,    56,    58,    57,    59,    60,
    50,    61,    62,    49,    71,    72,   nil,    53,    54,    55,
    51,    52,    69,    70,    65,    66,    67,    68,    63,    64,
    56,    58,    57,    59,    60,    50,    61,    62,    49,    71,
    72,   nil,    53,    54,    55,    51,    52,    69,    70,    65,
    66,    67,    68,    63,    64,    56,    58,    57,    59,    60,
    50,    61,    62,    49,    71,    72,   nil,    53,    54,    55,
    51,    52,    69,    70,    65,    66,    67,    68,    63,    64,
    56,    58,    57,    59,    60,    50,    61,    62,    49,    71,
    72,   nil,    53,    54,    55,    51,    52,    69,    70,    65,
    66,    67,    68,    63,    64,    56,    58,    57,    59,    49,
    71,    72,   nil,    53,    54,    55,    51,    52,    69,    70,
    65,    66,    67,    68,    63,    64,    56,    58,    57,    49,
    71,    72,   nil,    53,    54,    55,    51,    52,    69,    70,
    65,    66,    67,    68,    63,    64,    56,    58,    49,    71,
    72,   nil,    53,    54,    55,    51,    52,    69,    70,    65,
    66,    67,    68,    63,    64,    56,    49,    71,    72,   nil,
    53,    54,    55,    51,    52,    69,    70,    65,    66,    67,
    68,    63,    64,    49,    71,    72,   nil,    53,    54,    55,
    51,    52,    69,    70,    65,    66,    67,    68,    49,    71,
    72,   nil,    53,    54,    55,    51,    52,    69,    70,    65,
    66,    67,    68,    49,    71,    72,   nil,    53,    54,    55,
    51,    52,    69,    70,    49,    71,    72,   nil,    53,    54,
    55,    51,    52,    69,    70,    49,    71,    72,   nil,    53,
    54,    55,    51,    52,    69,    70,    49,    71,    72,   nil,
    53,    54,    55,    51,    52,    69,    70,    49,    71,    72,
   nil,    53,    54,    55,    51,    52,    69,    70,    49,    71,
    72,   nil,    53,    54,    55,    51,    52 ]

racc_action_check = [
     0,    90,    97,     0,     0,    17,     0,    95,   234,   134,
     0,   228,   228,     0,   228,    95,    98,    92,    92,     0,
    92,   234,    97,    90,    98,     6,   173,     6,   226,    29,
     0,   173,     0,     0,     0,     0,   226,     0,     0,     0,
     0,     6,    92,   186,   186,     0,     0,     0,     0,     0,
    17,   182,   182,   128,   182,    92,    28,     0,   128,     0,
     0,     0,     0,     3,   211,   211,     3,     3,   140,     3,
   228,    22,   182,     3,    83,    83,     3,    83,   171,   171,
   143,   171,     3,   240,   240,    83,   108,   108,   108,    20,
   108,   108,   108,     3,   148,     3,     3,     3,     3,   149,
     3,     3,     3,     3,   151,     3,   153,   154,     3,     3,
     3,     3,     3,   109,   109,   109,    19,   109,   109,   109,
     3,   157,     3,     3,     3,     3,   183,   183,   183,   158,
   183,   183,   183,   183,   183,   183,   183,   183,   183,   183,
   183,   183,   183,   183,   183,   183,   183,   183,   183,   183,
   183,   160,    18,   237,   237,   162,   237,   111,   111,   111,
   237,   136,   136,   237,   136,   112,   112,   112,   136,   237,
   163,   136,   215,   215,   165,   215,   166,   136,   167,   130,
   237,    33,   237,   237,   237,   237,   183,   237,   237,   237,
   237,   103,   237,   136,   172,   237,   237,   237,   237,   237,
    88,    88,    88,   101,    99,   136,   177,   237,   179,   237,
   237,   237,   237,   238,   238,   136,   238,   136,   136,   136,
   238,    13,    13,   238,    13,   110,   110,   110,    13,   238,
    16,    13,    87,    87,    87,    93,    91,    13,   184,   185,
   238,    78,   238,   238,   238,   238,    77,   238,   238,   238,
   238,    76,   238,    13,   194,   238,   238,   238,   238,   238,
    86,    86,    86,   238,   238,    13,   196,   238,   198,   238,
   238,   238,   238,   232,   232,    13,   232,    13,    13,    13,
   232,   203,   203,   232,   203,    85,    85,    85,   203,   232,
    75,   203,   202,    14,   206,   208,   209,   203,    12,    74,
   232,    11,   232,   232,   232,   232,   214,   232,   232,   232,
   232,    34,    36,   203,   219,   232,   232,   232,   232,   232,
    10,    37,   223,   224,    38,   203,     9,   232,    40,   232,
   232,   232,   232,   146,   146,   203,   146,   203,   203,   203,
   146,   213,   213,   146,   213,   230,     8,     7,   213,   146,
    42,   213,   235,    45,     1,   189,   nil,   213,   nil,   nil,
   146,   nil,   146,   146,   146,   146,   nil,   146,   146,   146,
   146,   nil,   146,   213,   nil,   146,   146,   146,   146,   146,
   nil,   nil,   nil,   nil,   nil,   213,   nil,   146,   nil,   146,
   146,   146,   146,   233,   233,   213,   233,   213,   213,   213,
   233,   180,   180,   233,   180,   nil,   nil,   nil,   180,   233,
   nil,   180,   nil,   nil,   nil,   nil,   nil,   180,   nil,   nil,
   233,   nil,   233,   233,   233,   233,   nil,   233,   233,   233,
   233,   nil,   nil,   180,   nil,   233,   233,   233,   233,   233,
   nil,   nil,   nil,   nil,   nil,   180,   nil,   233,   nil,   233,
   233,   233,   233,    64,    64,   180,    64,   180,   180,   180,
    64,   161,   161,    64,   161,   nil,   nil,   nil,   161,    64,
   nil,   161,   155,   155,   nil,   155,   nil,   161,   nil,   155,
   221,   221,   155,   221,   nil,    64,   nil,   221,   155,   nil,
   221,   nil,   nil,   161,   nil,   nil,   221,    64,   nil,   nil,
   nil,   nil,   nil,   nil,   155,   161,   nil,    64,   nil,    64,
    64,    64,   221,   nil,   nil,   161,   155,   161,   161,   161,
   nil,   nil,   nil,   nil,   221,   nil,   155,   nil,   155,   155,
   155,   nil,    21,    21,   221,    21,   221,   221,   221,    21,
   142,   142,    21,   142,   nil,   nil,   nil,   142,    21,   nil,
   142,    23,    23,   nil,    23,   nil,   142,   nil,    23,    24,
    24,    23,    24,   nil,    21,   nil,    24,    23,   nil,    24,
   nil,   nil,   142,   nil,   nil,    24,    21,   nil,   nil,   nil,
   nil,   nil,   nil,    23,   142,   nil,    21,   nil,    21,    21,
    21,    24,   nil,   nil,   142,    23,   142,   142,   142,   nil,
   nil,   nil,   nil,    24,   nil,    23,   nil,    23,    23,    23,
   nil,    25,    25,    24,    25,    24,    24,    24,    25,    26,
    26,    25,    26,   nil,   nil,   nil,    26,    25,   nil,    26,
    27,    27,   nil,    27,   nil,    26,   nil,    27,   138,   138,
    27,   138,   nil,    25,   nil,   138,    27,   nil,   138,   nil,
   nil,    26,   nil,   nil,   138,    25,   nil,   nil,   nil,   nil,
   nil,   nil,    27,    26,   nil,    25,   nil,    25,    25,    25,
   138,   nil,   nil,    26,    27,    26,    26,    26,   nil,   nil,
   nil,   nil,   138,   nil,    27,   nil,    27,    27,    27,   nil,
   nil,   nil,   138,   138,   138,   138,   138,   210,   210,   nil,
   210,   nil,    62,    62,   210,    62,   nil,   210,   nil,    62,
   nil,   nil,    62,   210,   nil,   nil,   nil,   nil,    62,   nil,
    72,    72,   nil,    72,   nil,   nil,   nil,    72,   nil,   210,
    72,   nil,   nil,   nil,    62,   nil,    72,   nil,   nil,   nil,
   nil,   210,   nil,   nil,   nil,   nil,    62,   nil,   nil,   nil,
   nil,   210,    72,   210,   210,   210,    62,   nil,    62,    62,
    62,   nil,   nil,   nil,    72,    71,    71,   nil,    71,   nil,
   nil,   nil,    71,   nil,    72,    71,    72,    72,    72,   nil,
   nil,    71,    70,    70,   nil,    70,   nil,   nil,   nil,    70,
   nil,   nil,    70,   nil,   nil,   nil,   nil,    71,    70,   nil,
    69,    69,   nil,    69,   nil,   nil,   nil,    69,   nil,    71,
    69,   nil,   nil,   nil,    70,   nil,    69,    39,    39,    71,
    39,    71,    71,    71,    39,   nil,    70,    39,   nil,   nil,
   nil,   nil,    69,    39,   nil,   nil,    70,   nil,    70,    70,
    70,   nil,   nil,   nil,    69,   nil,   nil,   nil,   nil,    39,
   nil,   nil,    68,    68,    69,    68,    69,    69,    69,    68,
   nil,    39,    68,   nil,   nil,   nil,   nil,   nil,    68,    41,
    41,    39,    41,    39,    39,    39,    41,   nil,   nil,    41,
   nil,   nil,   nil,   nil,    68,    41,   nil,    67,    67,   nil,
    67,   nil,   nil,   nil,    67,   nil,    68,    67,   nil,   nil,
   nil,    41,   nil,    67,    66,    66,    68,    66,    68,    68,
    68,    66,   nil,    41,    66,   nil,   nil,   nil,   nil,    67,
    66,   nil,   nil,    41,   nil,    41,    41,    41,   nil,   nil,
   nil,    67,   nil,   nil,   nil,   nil,    66,   nil,   nil,    65,
    65,    67,    65,    67,    67,    67,    65,   nil,    66,    65,
   nil,   nil,   nil,   nil,   nil,    65,    47,    47,    66,    47,
    66,    66,    66,    47,   nil,   nil,    47,   nil,   nil,   nil,
   nil,    65,    47,   nil,    49,    49,   nil,    49,   nil,   nil,
   nil,    49,   nil,    65,    49,   nil,   nil,   nil,    47,   nil,
    49,    50,    50,    65,    50,    65,    65,    65,    50,   nil,
    47,    50,   nil,   nil,   nil,   nil,    49,    50,   nil,   nil,
    47,   nil,    47,    47,    47,   nil,   nil,   nil,    49,   nil,
   nil,   nil,   nil,    50,   nil,   nil,    51,    51,    49,    51,
    49,    49,    49,    51,   nil,    50,    51,   nil,   nil,   nil,
   nil,   nil,    51,    52,    52,    50,    52,    50,    50,    50,
    52,   nil,   nil,    52,   nil,   nil,   nil,   nil,    51,    52,
   nil,    53,    53,   nil,    53,   nil,   nil,   nil,    53,   nil,
    51,    53,   nil,   nil,   nil,    52,   nil,    53,    54,    54,
    51,    54,    51,    51,    51,    54,   nil,    52,    54,   nil,
   nil,   nil,   nil,    53,    54,   nil,   nil,    52,   nil,    52,
    52,    52,   nil,   nil,   nil,    53,   nil,   nil,   nil,   nil,
    54,   nil,   nil,    55,    55,    53,    55,    53,    53,    53,
    55,   nil,    54,    55,   nil,   nil,   nil,   nil,   nil,    55,
    56,    56,    54,    56,    54,    54,    54,    56,   nil,   nil,
    56,   nil,   nil,   nil,   nil,    55,    56,   nil,    57,    57,
   nil,    57,   nil,   nil,   nil,    57,   nil,    55,    57,   nil,
   nil,   nil,    56,   nil,    57,    58,    58,    55,    58,    55,
    55,    55,    58,   nil,    56,    58,   nil,   nil,   nil,   nil,
    57,    58,   nil,   nil,    56,   nil,    56,    56,    56,   nil,
   nil,   nil,    57,   nil,   nil,   nil,   nil,    58,   nil,   nil,
    59,    59,    57,    59,    57,    57,    57,    59,   nil,    58,
    59,   nil,   nil,   nil,   nil,   nil,    59,    60,    60,    58,
    60,    58,    58,    58,    60,   nil,   nil,    60,   nil,   nil,
   nil,   nil,    59,    60,   nil,    61,    61,   nil,    61,   nil,
   nil,   nil,    61,   nil,    59,    61,   nil,   nil,   nil,    60,
   nil,    61,    63,    63,    59,    63,    59,    59,    59,    63,
   nil,    60,    63,   nil,   nil,   nil,   nil,    61,    63,   nil,
   nil,    60,   nil,    60,    60,    60,   nil,   nil,   nil,    61,
   nil,   nil,   nil,   nil,    63,   nil,   nil,   nil,   nil,    61,
   nil,    61,    61,    61,   nil,   nil,    63,   126,   126,   126,
   nil,   126,   126,   126,   126,   126,    63,   nil,    63,    63,
    63,   129,   129,   129,   nil,   129,   129,   129,   129,   129,
   129,   129,   129,   129,   129,   129,   129,   129,   129,   129,
   129,   129,   129,   129,   129,   129,   169,   169,   169,   nil,
   169,   169,   169,   169,   169,   169,   169,   169,   169,   169,
   169,   169,   169,   169,   169,   169,   169,   169,   169,   169,
   169,   nil,   nil,   nil,   188,   188,   188,   129,   188,   188,
   188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
   188,   188,   188,   188,   188,   188,   188,   188,   188,   nil,
   nil,   nil,   169,   nil,   nil,   229,   229,   229,   188,   229,
   229,   229,   229,   229,   229,   229,   229,   229,   229,   229,
   229,   229,   229,   229,   229,   229,   229,   229,   229,   229,
   nil,   102,   102,   102,   229,   102,   102,   102,   102,   102,
   102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
   102,   102,   102,   102,   102,   102,   nil,   222,   222,   222,
   102,   222,   222,   222,   222,   222,   222,   222,   222,   222,
   222,   222,   222,   222,   222,   222,   222,   222,   222,   222,
   222,   222,   nil,   105,   105,   105,   222,   105,   105,   105,
   105,   105,   105,   105,   105,   105,   105,   105,   105,   105,
   105,   105,   105,   105,   105,   105,   105,   105,   nil,    82,
    82,    82,   105,    82,    82,    82,    82,    82,    82,    82,
    82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
    82,    82,    82,    82,   nil,   100,   100,   100,    82,   100,
   100,   100,   100,   100,   100,   100,   100,   100,   100,   100,
   100,   100,   100,   100,   100,   100,   100,   100,   100,   100,
   nil,    15,    15,    15,   100,    15,    15,    15,    15,    15,
    15,    15,    15,    15,    15,    15,    15,    15,    15,    15,
    15,    15,    15,    15,    15,    15,   nil,    15,    89,    89,
    89,   nil,    89,    89,    89,    89,    89,    89,    89,    89,
    89,    89,    89,    89,    89,    89,    89,    89,    89,    89,
    89,    89,    89,   118,   118,   118,   nil,   118,   118,   118,
   118,   118,   118,   118,   118,   118,   118,   118,   118,   118,
   118,   118,   118,   118,   118,   118,   118,   118,   107,   107,
   107,   nil,   107,   107,   107,   107,   107,   107,   107,   107,
   107,   107,   107,   107,   107,   107,   107,   107,   107,   107,
   107,   107,   107,   119,   119,   119,   nil,   119,   119,   119,
   119,   119,   119,   119,   119,   119,   119,   119,   119,   119,
   119,   119,   119,   119,   119,   119,   119,   119,   175,   175,
   175,   nil,   175,   175,   175,   175,   175,   175,   175,   175,
   175,   175,   175,   175,   175,   175,   175,   175,   175,   175,
   175,   175,   175,   218,   218,   218,   nil,   218,   218,   218,
   218,   218,   218,   218,   218,   218,   218,   218,   218,   218,
   218,   218,   218,   218,   218,   218,   218,   218,   201,   201,
   201,   nil,   201,   201,   201,   201,   201,   201,   201,   201,
   201,   201,   201,   201,   201,   201,   201,   201,   201,   201,
   201,   201,   201,    46,    46,    46,   nil,    46,    46,    46,
    46,    46,    46,    46,    46,    46,    46,    46,    46,    46,
    46,    46,    46,    46,    46,    46,    46,    46,   117,   117,
   117,   nil,   117,   117,   117,   117,   117,   117,   117,   117,
   117,   117,   117,   117,   117,   117,   117,   117,   117,   116,
   116,   116,   nil,   116,   116,   116,   116,   116,   116,   116,
   116,   116,   116,   116,   116,   116,   116,   116,   116,   114,
   114,   114,   nil,   114,   114,   114,   114,   114,   114,   114,
   114,   114,   114,   114,   114,   114,   114,   114,   115,   115,
   115,   nil,   115,   115,   115,   115,   115,   115,   115,   115,
   115,   115,   115,   115,   115,   115,   113,   113,   113,   nil,
   113,   113,   113,   113,   113,   113,   113,   113,   113,   113,
   113,   113,   113,   121,   121,   121,   nil,   121,   121,   121,
   121,   121,   121,   121,   121,   121,   121,   121,   120,   120,
   120,   nil,   120,   120,   120,   120,   120,   120,   120,   120,
   120,   120,   120,   122,   122,   122,   nil,   122,   122,   122,
   122,   122,   122,   122,   168,   168,   168,   nil,   168,   168,
   168,   168,   168,   168,   168,   125,   125,   125,   nil,   125,
   125,   125,   125,   125,   125,   125,   123,   123,   123,   nil,
   123,   123,   123,   123,   123,   123,   123,   124,   124,   124,
   nil,   124,   124,   124,   124,   124,   124,   124,   127,   127,
   127,   nil,   127,   127,   127,   127,   127 ]

racc_action_pointer = [
     0,   354,   nil,    63,   nil,   nil,    -2,   344,   343,   323,
   317,   273,   270,   218,   290,  1549,   202,    -1,   117,    72,
    45,   529,    36,   548,   556,   608,   616,   627,    53,    -6,
   nil,   nil,   nil,   178,   311,   nil,   277,   286,   289,   814,
   297,   866,   315,   nil,   nil,   325,  1751,   953,   nil,   971,
   988,  1023,  1040,  1058,  1075,  1110,  1127,  1145,  1162,  1197,
  1214,  1232,   699,  1249,   450,   936,   901,   884,   849,   797,
   779,   762,   717,   nil,   264,   240,   201,   195,   238,   nil,
   nil,   nil,  1497,    71,   nil,   283,   258,   230,   198,  1576,
   -35,   189,    14,   200,   nil,   -21,   nil,   -22,   -12,   201,
  1523,   162,  1419,   155,   nil,  1471,   nil,  1626,    84,   111,
   223,   155,   163,  1854,  1817,  1836,  1797,  1776,  1601,  1651,
  1886,  1871,  1901,  1934,  1945,  1923,  1295,  1956,    22,  1309,
   127,   nil,   nil,   nil,   -38,   nil,   158,   nil,   635,   nil,
    33,   nil,   537,    49,   nil,   nil,   330,   nil,    63,    63,
   nil,    60,   nil,    71,    72,   469,   nil,    86,    88,   nil,
   110,   458,   114,   129,   nil,   146,   141,   147,  1912,  1334,
   nil,    75,   150,    -5,   nil,  1676,   nil,   164,   nil,   173,
   398,   nil,    48,   124,   207,   203,   -12,   nil,  1362,   301,
   nil,   nil,   nil,   nil,   192,   nil,   231,   nil,   233,   nil,
   nil,  1726,   230,   278,   nil,   nil,   250,   nil,   254,   293,
   694,    11,   nil,   338,   278,   169,   nil,   nil,  1701,   279,
   nil,   477,  1445,   280,   279,   nil,    -8,   nil,     8,  1393,
   304,   nil,   270,   390,   -20,   311,   nil,   150,   210,   nil,
    28,   nil ]

racc_action_default = [
   -24,  -115,    -1,   -24,    -5,    -6,  -115,  -115,  -115,  -115,
  -115,  -115,  -115,   -48,  -115,  -115,  -115,   -26,   -33,   -25,
  -115,  -115,  -115,  -115,  -115,  -115,  -115,   -88,  -115,  -115,
   -83,   -84,   -85,  -115,  -115,    -4,  -115,  -115,  -115,  -115,
  -115,  -115,  -115,   -13,   -14,  -115,   -49,  -115,   -17,  -115,
  -115,  -115,  -115,  -115,  -115,  -115,  -115,  -115,  -115,  -115,
  -115,  -115,  -115,  -115,  -115,  -115,  -115,  -115,  -115,  -115,
  -115,   -88,  -115,   -19,  -115,  -115,  -115,   -29,  -115,   -34,
   -22,   -23,  -115,  -115,  -105,   -74,   -75,   -76,   -77,   -87,
  -115,  -115,  -115,  -115,   242,  -115,   -99,  -115,  -115,  -115,
  -115,  -115,  -115,  -115,   -15,  -115,   -51,   -52,   -53,   -54,
   -55,   -56,   -57,   -58,   -59,   -60,   -61,   -62,   -63,   -64,
   -65,   -66,   -67,   -68,   -69,   -70,   -71,   -72,  -115,  -115,
   -31,   -27,   -28,   -30,  -115,   -50,  -115,  -104,  -115,  -108,
  -112,   -80,  -115,  -115,   -40,   -41,   -24,   -82,  -115,   -92,
   -94,  -115,    -7,  -115,  -115,  -115,    -8,   -96,  -115,   -10,
  -115,  -115,  -115,   -43,   -79,  -115,  -115,  -115,   -73,  -115,
  -107,  -113,  -105,  -115,  -111,   -86,   -81,  -115,   -91,  -115,
  -115,   -98,  -102,   -89,  -115,   -97,   -45,   -11,  -115,  -115,
   -44,   -78,   -20,   -32,   -89,  -106,  -115,  -109,  -115,   -42,
   -93,   -95,   -89,  -115,   -90,  -101,  -115,    -9,  -115,  -115,
  -115,   -35,   -38,   -88,  -115,  -114,  -110,  -100,  -103,  -115,
   -46,  -115,  -115,  -115,  -115,   -37,  -115,   -21,   -89,  -115,
  -115,   -16,   -24,   -24,  -115,  -115,   -12,   -24,   -24,   -18,
   -45,   -47 ]

racc_goto_table = [
    35,    46,     2,    83,   147,   159,    95,    98,   150,    82,
    92,    85,    86,    87,    88,    89,    75,    90,   207,   174,
   237,   238,   191,   165,    78,   211,   184,   100,    45,   102,
    74,   148,   149,   223,   181,   105,   202,   106,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,    89,
   129,   128,   186,   205,   187,   173,   212,   190,   204,     1,
   nil,   nil,   241,   nil,   214,   nil,   133,   216,   nil,   204,
   nil,   nil,   217,   nil,   nil,   nil,   nil,   204,   225,   nil,
   nil,   nil,   nil,   nil,   200,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   234,   nil,
   nil,   nil,   220,   204,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   168,   nil,   169,   185,   nil,   nil,
   175,   nil,   nil,   nil,   236,   182,   nil,   nil,   nil,   240,
   nil,   nil,   nil,   183,   nil,   nil,   239,   nil,   177,   188,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   201,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   215,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   218,   nil,   nil,   nil,   nil,   nil,   nil,   222,   nil,
   228,    89,   nil,   226,   nil,   nil,   nil,   nil,   nil,   229,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    35,    35 ]

racc_goto_check = [
     4,     8,     2,    15,    17,     9,     7,     7,    28,     8,
    15,     8,     8,     8,     8,     8,    22,    24,    10,    33,
     3,     3,    25,    20,    21,    12,    14,     8,    11,     8,
    19,    26,    27,    13,    29,     8,    30,     8,     8,     8,
     8,     8,     8,     8,     8,     8,     8,     8,     8,     8,
     8,     8,     8,     8,     8,     8,     8,     8,     8,     8,
     8,    24,     9,    16,     9,    32,    23,     9,    18,     1,
   nil,   nil,    10,   nil,    16,   nil,    22,    33,   nil,    18,
   nil,   nil,    16,   nil,   nil,   nil,   nil,    18,    23,   nil,
   nil,   nil,   nil,   nil,    28,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    16,   nil,
   nil,   nil,     9,    18,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     8,   nil,     8,     7,   nil,   nil,
     8,   nil,   nil,   nil,     9,    15,   nil,   nil,   nil,     9,
   nil,   nil,   nil,     8,   nil,   nil,    17,   nil,     2,     8,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     8,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    15,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     8,   nil,   nil,   nil,   nil,   nil,   nil,     8,   nil,
    15,     8,   nil,    24,   nil,   nil,   nil,   nil,   nil,     8,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     4,     4 ]

racc_goto_pointer = [
   nil,    69,     2,  -212,    -3,   nil,   nil,   -30,   -12,   -96,
  -168,    15,  -164,  -178,  -131,   -19,  -120,   -88,  -115,    13,
  -107,     6,    -1,  -123,   -10,  -141,   -62,   -61,   -85,  -119,
  -146,   nil,   -75,  -121 ]

racc_goto_default = [
   nil,   nil,   nil,     3,     4,     5,     6,   nil,    15,   144,
   nil,   nil,   nil,   nil,   nil,   171,   nil,   nil,    16,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    96,
   nil,   137,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 64, :_reduce_none,
  1, 65, :_reduce_none,
  0, 65, :_reduce_3,
  2, 66, :_reduce_4,
  1, 66, :_reduce_5,
  1, 67, :_reduce_6,
  4, 68, :_reduce_7,
  4, 68, :_reduce_8,
  6, 68, :_reduce_9,
  4, 68, :_reduce_10,
  5, 68, :_reduce_11,
  9, 68, :_reduce_12,
  2, 68, :_reduce_13,
  2, 68, :_reduce_14,
  3, 68, :_reduce_15,
  8, 68, :_reduce_16,
  2, 68, :_reduce_17,
  10, 68, :_reduce_18,
  2, 68, :_reduce_19,
  5, 68, :_reduce_20,
  7, 68, :_reduce_21,
  2, 68, :_reduce_22,
  2, 68, :_reduce_23,
  0, 69, :_reduce_none,
  1, 69, :_reduce_25,
  0, 82, :_reduce_none,
  2, 82, :_reduce_27,
  2, 82, :_reduce_28,
  1, 85, :_reduce_29,
  2, 85, :_reduce_30,
  0, 83, :_reduce_none,
  2, 83, :_reduce_32,
  0, 84, :_reduce_none,
  1, 84, :_reduce_none,
  0, 76, :_reduce_none,
  3, 76, :_reduce_36,
  2, 75, :_reduce_37,
  1, 75, :_reduce_38,
  4, 86, :_reduce_39,
  1, 80, :_reduce_none,
  1, 80, :_reduce_41,
  3, 72, :_reduce_42,
  0, 88, :_reduce_none,
  1, 88, :_reduce_none,
  0, 73, :_reduce_none,
  2, 73, :_reduce_46,
  6, 73, :_reduce_47,
  0, 74, :_reduce_none,
  1, 74, :_reduce_none,
  3, 71, :_reduce_50,
  3, 71, :_reduce_51,
  3, 71, :_reduce_52,
  3, 71, :_reduce_53,
  3, 71, :_reduce_54,
  3, 71, :_reduce_55,
  3, 71, :_reduce_56,
  3, 71, :_reduce_57,
  3, 71, :_reduce_58,
  3, 71, :_reduce_59,
  3, 71, :_reduce_60,
  3, 71, :_reduce_61,
  3, 71, :_reduce_62,
  3, 71, :_reduce_63,
  3, 71, :_reduce_64,
  3, 71, :_reduce_65,
  3, 71, :_reduce_66,
  3, 71, :_reduce_67,
  3, 71, :_reduce_68,
  3, 71, :_reduce_69,
  3, 71, :_reduce_70,
  3, 71, :_reduce_71,
  3, 71, :_reduce_72,
  4, 71, :_reduce_73,
  2, 71, :_reduce_74,
  2, 71, :_reduce_75,
  2, 71, :_reduce_76,
  2, 71, :_reduce_77,
  5, 71, :_reduce_78,
  4, 71, :_reduce_79,
  3, 71, :_reduce_80,
  4, 71, :_reduce_81,
  3, 71, :_reduce_82,
  1, 71, :_reduce_none,
  1, 71, :_reduce_none,
  1, 71, :_reduce_none,
  3, 87, :_reduce_86,
  1, 87, :_reduce_87,
  0, 87, :_reduce_88,
  0, 79, :_reduce_none,
  1, 79, :_reduce_none,
  4, 81, :_reduce_91,
  1, 89, :_reduce_92,
  3, 90, :_reduce_93,
  1, 90, :_reduce_94,
  3, 91, :_reduce_95,
  0, 77, :_reduce_96,
  1, 77, :_reduce_none,
  3, 70, :_reduce_98,
  1, 70, :_reduce_99,
  5, 92, :_reduce_100,
  4, 92, :_reduce_101,
  0, 93, :_reduce_none,
  2, 93, :_reduce_103,
  2, 78, :_reduce_104,
  1, 78, :_reduce_105,
  3, 94, :_reduce_106,
  2, 94, :_reduce_107,
  1, 94, :_reduce_108,
  3, 94, :_reduce_109,
  3, 95, :_reduce_110,
  1, 95, :_reduce_111,
  0, 95, :_reduce_112,
  1, 96, :_reduce_none,
  3, 96, :_reduce_114 ]

racc_reduce_n = 115

racc_shift_n = 242

racc_token_table = {
  false => 0,
  :error => 1,
  "." => 2,
  "(" => 3,
  "[" => 4,
  :UMINUS => 5,
  "*" => 6,
  "/" => 7,
  "%" => 8,
  "+" => 9,
  "-" => 10,
  "<<" => 11,
  ">>" => 12,
  "<" => 13,
  ">" => 14,
  "<=" => 15,
  ">=" => 16,
  "==" => 17,
  "!=" => 18,
  "&" => 19,
  "^" => 20,
  "|" => 21,
  "&&" => 22,
  "||" => 23,
  "=" => 24,
  "+=" => 25,
  "-=" => 26,
  "var" => 27,
  ";" => 28,
  "const" => 29,
  "if" => 30,
  ")" => 31,
  "loop" => 32,
  "while" => 33,
  "for" => 34,
  :IDENT => 35,
  "," => 36,
  "break" => 37,
  "continue" => 38,
  "return" => 39,
  "switch" => 40,
  "{" => 41,
  "}" => 42,
  "function" => 43,
  ":" => 44,
  "use" => 45,
  "include" => 46,
  :STRING => 47,
  "public" => 48,
  "private" => 49,
  "from" => 50,
  :id => 51,
  "as" => 52,
  "default" => 53,
  "case" => 54,
  "else" => 55,
  "elsif" => 56,
  "!" => 57,
  "]" => 58,
  "incbin" => 59,
  "->" => 60,
  :NUMBER => 61,
  "options" => 62 }

racc_nt_base = 63

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\".\"",
  "\"(\"",
  "\"[\"",
  "UMINUS",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"+\"",
  "\"-\"",
  "\"<<\"",
  "\">>\"",
  "\"<\"",
  "\">\"",
  "\"<=\"",
  "\">=\"",
  "\"==\"",
  "\"!=\"",
  "\"&\"",
  "\"^\"",
  "\"|\"",
  "\"&&\"",
  "\"||\"",
  "\"=\"",
  "\"+=\"",
  "\"-=\"",
  "\"var\"",
  "\";\"",
  "\"const\"",
  "\"if\"",
  "\")\"",
  "\"loop\"",
  "\"while\"",
  "\"for\"",
  "IDENT",
  "\",\"",
  "\"break\"",
  "\"continue\"",
  "\"return\"",
  "\"switch\"",
  "\"{\"",
  "\"}\"",
  "\"function\"",
  "\":\"",
  "\"use\"",
  "\"include\"",
  "STRING",
  "\"public\"",
  "\"private\"",
  "\"from\"",
  "id",
  "\"as\"",
  "\"default\"",
  "\"case\"",
  "\"else\"",
  "\"elsif\"",
  "\"!\"",
  "\"]\"",
  "\"incbin\"",
  "\"->\"",
  "NUMBER",
  "\"options\"",
  "$start",
  "program",
  "opt_statement_list",
  "statement_list",
  "statement_i",
  "statement",
  "opt_scope",
  "var_decl_list",
  "exp",
  "block",
  "else_block",
  "opt_exp",
  "switch_block",
  "opt_default_block",
  "opt_var_decl_list",
  "type_decl",
  "opt_options",
  "function_block",
  "options",
  "opt_from",
  "opt_as",
  "opt_ident",
  "id_list",
  "case_block",
  "exp_list",
  "opt_block",
  "option_list",
  "option_list_sub",
  "option",
  "var_decl",
  "opt_var_init",
  "type_modifier",
  "arg_decl_list",
  "arg_decl" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

module_eval(<<'.,.,', 'parser.y', 27)
  def _reduce_3(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 29)
  def _reduce_4(val, _values, result)
     result = val[0] + [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 30)
  def _reduce_5(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 32)
  def _reduce_6(val, _values, result)
     info(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 34)
  def _reduce_7(val, _values, result)
     result = [:var, val[2], val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 35)
  def _reduce_8(val, _values, result)
     result = [:const, val[2], val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 36)
  def _reduce_9(val, _values, result)
     result = [:if, val[2], val[4], val[5]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 37)
  def _reduce_10(val, _values, result)
     result = [:loop, val[3]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 38)
  def _reduce_11(val, _values, result)
     result = [:while, val[2], val[4]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 39)
  def _reduce_12(val, _values, result)
     result = [:for, val[2], val[4], val[6], val[8]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 40)
  def _reduce_13(val, _values, result)
     result = [:break] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 41)
  def _reduce_14(val, _values, result)
     result = [:continue] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 42)
  def _reduce_15(val, _values, result)
     result = [:return, val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 43)
  def _reduce_16(val, _values, result)
     result = [:switch, val[2], val[5], val[6]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 44)
  def _reduce_17(val, _values, result)
     result = [:exp, val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 46)
  def _reduce_18(val, _values, result)
     result = [:function, val[0], val[2], val[4], val[7], val[8], val[9] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 47)
  def _reduce_19(val, _values, result)
     result = [:options, val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 48)
  def _reduce_20(val, _values, result)
     result = [:use, val[2], val[3], val[1] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 49)
  def _reduce_21(val, _values, result)
     result = [:include, val[3], val[1], val[5] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 50)
  def _reduce_22(val, _values, result)
     result = [:public] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 51)
  def _reduce_23(val, _values, result)
     result = [:private] 
    result
  end
.,.,

# reduce 24 omitted

module_eval(<<'.,.,', 'parser.y', 53)
  def _reduce_25(val, _values, result)
     result = :public 
    result
  end
.,.,

# reduce 26 omitted

module_eval(<<'.,.,', 'parser.y', 56)
  def _reduce_27(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 57)
  def _reduce_28(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 59)
  def _reduce_29(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 60)
  def _reduce_30(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

# reduce 31 omitted

module_eval(<<'.,.,', 'parser.y', 62)
  def _reduce_32(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

module_eval(<<'.,.,', 'parser.y', 66)
  def _reduce_36(val, _values, result)
     result = val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 68)
  def _reduce_37(val, _values, result)
     result = val[0] + [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 69)
  def _reduce_38(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 71)
  def _reduce_39(val, _values, result)
     result = [val[1], val[3]] 
    result
  end
.,.,

# reduce 40 omitted

module_eval(<<'.,.,', 'parser.y', 75)
  def _reduce_41(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 77)
  def _reduce_42(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

module_eval(<<'.,.,', 'parser.y', 82)
  def _reduce_46(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 83)
  def _reduce_47(val, _values, result)
     result = [[:if, val[2], val[4], val[5]]] 
    result
  end
.,.,

# reduce 48 omitted

# reduce 49 omitted

module_eval(<<'.,.,', 'parser.y', 89)
  def _reduce_50(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 90)
  def _reduce_51(val, _values, result)
     result = [:dot, val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 91)
  def _reduce_52(val, _values, result)
     result = [:load, val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 92)
  def _reduce_53(val, _values, result)
     result = [:add, val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 93)
  def _reduce_54(val, _values, result)
     result = [:sub, val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 94)
  def _reduce_55(val, _values, result)
     result = [:mul, val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 95)
  def _reduce_56(val, _values, result)
     result = [:div, val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 96)
  def _reduce_57(val, _values, result)
     result = [:mod, val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 97)
  def _reduce_58(val, _values, result)
     result = [:and, val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 98)
  def _reduce_59(val, _values, result)
     result = [:or , val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 99)
  def _reduce_60(val, _values, result)
     result = [:xor, val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 100)
  def _reduce_61(val, _values, result)
     result = [:land, val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 101)
  def _reduce_62(val, _values, result)
     result = [:lor, val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 102)
  def _reduce_63(val, _values, result)
     result = [:load, val[0], [:add, val[0], val[2]]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 103)
  def _reduce_64(val, _values, result)
     result = [:load, val[0], [:sub, val[0], val[2]]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 104)
  def _reduce_65(val, _values, result)
     result = [:eq, val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 105)
  def _reduce_66(val, _values, result)
     result = [:ne, val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 106)
  def _reduce_67(val, _values, result)
     result = [:lt, val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 107)
  def _reduce_68(val, _values, result)
     result = [:gt, val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 108)
  def _reduce_69(val, _values, result)
     result = [:le, val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 109)
  def _reduce_70(val, _values, result)
     result = [:ge, val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 110)
  def _reduce_71(val, _values, result)
     result = [:shift_left, val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 111)
  def _reduce_72(val, _values, result)
     result = [:shift_right, val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 112)
  def _reduce_73(val, _values, result)
     result = [:cast, val[3], val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 113)
  def _reduce_74(val, _values, result)
     result = [:not, val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 114)
  def _reduce_75(val, _values, result)
     result = [:uminus, val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 115)
  def _reduce_76(val, _values, result)
     result = [:deref, val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 116)
  def _reduce_77(val, _values, result)
     result = [:ref, val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 117)
  def _reduce_78(val, _values, result)
     result = [:call, val[0], val[2], val[4]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 118)
  def _reduce_79(val, _values, result)
     result = [:index, val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 119)
  def _reduce_80(val, _values, result)
     result = [:array, val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 120)
  def _reduce_81(val, _values, result)
     result = [:incbin, val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 121)
  def _reduce_82(val, _values, result)
     result = [:lambda, val[1], val[2]] 
    result
  end
.,.,

# reduce 83 omitted

# reduce 84 omitted

# reduce 85 omitted

module_eval(<<'.,.,', 'parser.y', 126)
  def _reduce_86(val, _values, result)
     result = val[0] + [val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 127)
  def _reduce_87(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 128)
  def _reduce_88(val, _values, result)
     result = [] 
    result
  end
.,.,

# reduce 89 omitted

# reduce 90 omitted

module_eval(<<'.,.,', 'parser.y', 133)
  def _reduce_91(val, _values, result)
     result = val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 135)
  def _reduce_92(val, _values, result)
     result = Hash[ *val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 136)
  def _reduce_93(val, _values, result)
     result = val[0] + val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 137)
  def _reduce_94(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 138)
  def _reduce_95(val, _values, result)
     result = [val[0],val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 142)
  def _reduce_96(val, _values, result)
    result = [] 
    result
  end
.,.,

# reduce 97 omitted

module_eval(<<'.,.,', 'parser.y', 143)
  def _reduce_98(val, _values, result)
     result = val[0]+[val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 144)
  def _reduce_99(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 146)
  def _reduce_100(val, _values, result)
     result = [val[0], val[2], val[3], val[4]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 147)
  def _reduce_101(val, _values, result)
     result = [val[0], nil, val[2], val[3]] 
    result
  end
.,.,

# reduce 102 omitted

module_eval(<<'.,.,', 'parser.y', 149)
  def _reduce_103(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 153)
  def _reduce_104(val, _values, result)
     result = val[1]+[val[0]]; 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 154)
  def _reduce_105(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 156)
  def _reduce_106(val, _values, result)
     result = [:array, val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 157)
  def _reduce_107(val, _values, result)
     result = [:array, nil] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 158)
  def _reduce_108(val, _values, result)
     result = [:pointer] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 159)
  def _reduce_109(val, _values, result)
     result = [:lambda, val[1] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 161)
  def _reduce_110(val, _values, result)
     result = val[0] + [val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 162)
  def _reduce_111(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 163)
  def _reduce_112(val, _values, result)
     result = [] 
    result
  end
.,.,

# reduce 113 omitted

module_eval(<<'.,.,', 'parser.y', 166)
  def _reduce_114(val, _values, result)
     result = [val[0],val[2]] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Fc

require_relative 'parser_ext'
