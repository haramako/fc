**TODO

* |= などを実装
* intを返す関数でreturnを書かないと挙動がおかしい？(do_debug_selectで発生)
* ~(not) を追加
* fastcall(スタックを使わない呼び出し規約）を追加する
* public属性は、scopeにいれる
* const属性は、typeにいれる
* indexなどのsize倍する処理を、分割する
* マクロの構成を考える
* Value.kind の整理
 * 宣言(declare)と定義(define)の分離
* 分割コンパイルのサポート(.fcm)
* ポインタアクセスが容量を食い過ぎる
* Bug: "//\n" の行でエラー
*sizeof()の実装
*グローバル変数の初期化
*functionにスタックを使わないオプションを追加する(ただし、内部で関数は呼べない)
*constの２重配列、ポインタ配列などに対応
*';'省略
*'('省略
*インライン関数
*goto文

*クロージャの追加
*include/optionsの整理(fc,asm,chr, rb(マクロ) )

- .include の構成についてよく考える
 - 再帰インクルード、２重のインクルードなど(unittest->stdioなど)
- pointerのインデックスがうまく動かない？ index_p{set|get}がだめっぽい
- Bug: int16 + int8 が動かん
- <<, >> 演算子
-ポインタ演算の追加
-スタックのポインタを取得できるようにする
-マクロ
-ブロックスコープを追加
-ステータスレジスタ最適化
-ブランチが+-128以上にとべるように(自動で選択できるように)
  beqx のような命令をアセンブラに追加して、あとで変換する
- *,& の実装
-switch文をつくる
-lambdaを追加
-配列リテラル、文字列リテラルなどをvalではなく、別の位置に保管するようにする
-符号拡張をちゃんとする(けっこう厄介,変換機構が必要)
-options でバンク数などの指定を調整する
-arrayからpointerへの自動変換のコードを整理(Value.kindになにか追加する？)
-メモリの重複割り当て
-lambdaを値として取れるようにする（引数の汎用化が必須)
-配列サイズの省略(初期化式ありのみ）
-signedの導入
-型補完をいれる
-/,*,&,|,&&,||の実装
-aレジスタの最適化
-indexのサイズを反映
-include_binを追加
-配列の初期化
-index/pget/psetの最適化
-callの複数引数化
-returnをちゃんとする
-voidをいれる


**クロック数
CPU = 1.79MHz

水平同期あたりクロック数 =   113 clock (= 340PPU clock )
垂直同期あたりクロック数 = 29833 clock
vblankクロック数         =  2505 clock

